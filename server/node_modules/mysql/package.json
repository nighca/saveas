{
  "name": "mysql",
  "version": "0.9.6",
  "author": {
    "name": "Felix Geisend√∂rfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "description": "A pure node.js JavaScript Client implementing the MySQL protocol.",
  "homepage": "https://github.com/felixge/node-mysql",
  "repository": {
    "type": "git",
    "url": "git://github.com/felixge/node-mysql.git"
  },
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "dependencies": {
    "hashish": "0.0.4"
  },
  "devDependencies": {
    "gently": "0.8.0",
    "urun": "0.0.4",
    "utest": "0.0.3"
  },
  "engines": {
    "node": "*"
  },
  "optionalDependencies": {},
  "readme": "# node-mysql\n\n[![Build Status](https://secure.travis-ci.org/felixge/node-mysql.png?branch=master)](http://travis-ci.org/felixge/node-mysql)\n\n## Purpose\n\nA pure node.js JavaScript Client implementing the [MySQL protocol](http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol).\n\n## Support this module\n\nIf you like this module, check out and spread the word about our service\n[transloadit.com][]. We provide file uploading and encoding functionality to\nother applications, and have performed billions of queries with this module so\nfar.\n\n[transloadit.com]: http://transloadit.com/\n\n## Installation\n\n```\nnpm install mysql\n```\n\n**Important**: If you are upgrading from 0.9.1 or below, there have been\nbackwards incompatible changes in the API. Please read the [upgrading guide][].\n\n[upgrading guide]: https://github.com/felixge/node-mysql/wiki/Upgrading-to-0.9.2+\n\n## Usage\n\n``` javascript\nvar mysql = require('mysql');\nvar TEST_DATABASE = 'nodejs_mysql_test';\nvar TEST_TABLE = 'test';\nvar client = mysql.createClient({\n  user: 'root',\n  password: 'root',\n});\n\nclient.query('CREATE DATABASE '+TEST_DATABASE, function(err) {\n  if (err && err.number != mysql.ERROR_DB_CREATE_EXISTS) {\n    throw err;\n  }\n});\n\n// If no callback is provided, any errors will be emitted as `'error'`\n// events by the client\nclient.query('USE '+TEST_DATABASE);\n\nclient.query(\n  'CREATE TEMPORARY TABLE '+TEST_TABLE+\n  '(id INT(11) AUTO_INCREMENT, '+\n  'title VARCHAR(255), '+\n  'text TEXT, '+\n  'created DATETIME, '+\n  'PRIMARY KEY (id))'\n);\n\nclient.query(\n  'INSERT INTO '+TEST_TABLE+' '+\n  'SET title = ?, text = ?, created = ?',\n  ['super cool', 'this is a nice text', '2010-08-16 10:00:23']\n);\n\nvar query = client.query(\n  'INSERT INTO '+TEST_TABLE+' '+\n  'SET title = ?, text = ?, created = ?',\n  ['another entry', 'because 2 entries make a better test', '2010-08-16 12:42:15']\n);\n\nclient.query(\n  'SELECT * FROM '+TEST_TABLE,\n  function selectCb(err, results, fields) {\n    if (err) {\n      throw err;\n    }\n\n    console.log(results);\n    console.log(fields);\n    client.end();\n  }\n);\n```\n\n## API\n\n### mysql.createClient([options])\n\nCreates a new client instance. Any client property can be set using the\n`options` object.\n\n### client.host = 'localhost'\n\nThe host to connect to.\n\n### client.port = 3306\n\nThe port to connect to.\n\n### client.user = null\n\nThe username to authenticate as.\n\n### client.password = null\n\nThe password to use.\n\n### client.database = null\n\nThe name of the database to connect to (optional).\n\n### client.debug = false\n\nPrints incoming and outgoing packets, useful for development / testing purposes.\n\n### client.flags = Client.defaultFlags\n\nConnection flags send to the server.\n\n### client.query(sql, [params, cb])\n\nSends a `sql` query to the server. `'?'` characters can be used as placeholders\nfor an array of `params` that will be safely escaped before sending the final\nquery.\n\nThis method returns a `Query` object which can be used to stream incoming row\ndata.\n\n**Warning:** `sql` statements with multiple queries separated by semicolons\nare not supported yet.\n\n### client.ping([cb])\n\nSends a ping command to the server.\n\n### client.useDatabase(database, [cb])\n\nSame as issuing a `'USE <database>'` query.\n\n### client.statistics([cb])\n\nReturns some server statistics provided by MySql.\n\n### client.format(sql, params)\n\nAllows to safely insert a list of `params` into a `sql` string using the\nplaceholder mechanism described above.\n\n### client.escape(val)\n\nEscapes a single `val` for use inside of a sql string.\n\n### client.destroy()\n\nForces the client connection / socket to be destroyed right away.\n\n### client.end([cb])\n\nSchedule a COM_QUIT packet for closing the connection. All currently queued\nqueries will still execute before the graceful termination of the connection\nis attempted.\n\n### client event: 'error' (err)\n\nWhen the client has no callback / delegate for an error, it is emitted with this\nevent instead.\n\n### new mysql.Query()\n\nQuery objects are not meant to be invoked manually. To get a query object, use\nthe `client.query` API.\n\n### query event: 'error' (err)\n\nEmitted when mysql returns an error packet for the query.\n\n### query event: 'field' (field)\n\nEmitted upon receiving a field packet from mysql.\n\n### query event: 'row' (row)\n\nEmitted upon receiving a row. An option for streaming the contents of the row\nitself will be made available soon.\n\n### query event: 'end' ([result])\n\nEmitted once the query is finished. In case there is no result set, a `result`\nparameter is provided which contains the information from the mysql OK packet.\n\n## FAQ\n\n### How do I compile this module?\n\nThis module is written entirely in JavaScript. There is no dependency on external\nC libraries such as libmysql. That means you don't have to compile this module\nat all.\n\n### How can I retrieve the id from the last inserted record?\n\n    client.query('INSERT INTO my_table SET title = ?', function(err, info) {\n      console.log(info.insertId);\n    });\n\n### How can I find out the number of rows affected by the last query?\n\n    client.query('UPDATE my_table SET title = ?', function(err, info) {\n      console.log(info.affectedRows);\n    });\n\n## Todo\n\nAt this point the module is ready to be tried out, but a lot of things are yet to be done:\n\n* Implement retry\n* Pause / resume\n* Remaining mysql commands\n* Prepared Statements\n* Packet's > 16 MB\n* Compression\n* Decide how to handle queries with multiple statements\n* Transactions\n\nA stop-gap solution to support multiple statements and transactions is\navailable. Check it out here: http://github.com/bminer/node-mysql-queues\n\n## Contributors\n\n[Click here][contributors] for a full list of contributors.\n\n[contributors]: https://github.com/felixge/node-mysql/contributors\n\n## Sponsors\n\n* [Joyent](http://www.joyent.com/) - Main sponsor, you should check out their [node.js hosting](https://no.de/).\n* [pinkbike.com](http://pinkbike.com/) - The most awesome biking site there is\n\nThis is a rather large project requiring a significant amount of my limited resources.\n\nIf your company could benefit from a well-engineered non-blocking mysql driver, and\nwants to support this project, I would greatly appriciate any sponsorship you may be\nable to provide. All sponsors will get lifetime display in this readme, priority\nsupport on problems, and votes on roadmap decisions. If you are interested, contact\nme at [felix@debuggable.com](mailto:felix@debuggable.com) for details.\n\nOf course I'm also happy about code contributions. If you're interested in\nworking on features, just get in touch so we can talk about API design and\ntesting.\n\n[transloadit]: http://transloadit.com/\n\n## Changelog\n\n### v0.9.6\n\n* Escape array values so they produce sql arrays (Roger Castells, Colin Smith)\n* docs: mention mysql transaction stop gap solution (Blake Miner)\n* docs: Mention affectedRows in FAQ (Michael Baldwin)\n\n### v0.9.5\n\n* Fix #142 Driver stalls upon reconnect attempt that's immediately closed\n* Add travis build\n* Switch to urun as a test runner\n* Switch to utest for unit tests\n* Remove fast-or-slow dependency for tests\n* Split integration tests into individual files again\n\n### v0.9.4\n\n* Expose package.json as `mysql.PACKAGE` (#104)\n\n### v0.9.3\n\n* Set default `client.user` to root\n* Fix #91: Client#format should not mutate params array\n* Fix #94: TypeError in client.js\n* Parse decimals as string (vadimg)\n\n### v0.9.2\n\n* The underlaying socket connection is now managed implicitly rather than explicitly.\n* Check the [upgrading guide][] for a full list of changes.\n\n### v0.9.1\n\n* Fix issue #49 / `client.escape()` throwing exceptions on objects. (Nick Payne)\n* Drop < v0.4.x compatibility. From now on you need node v0.4.x to use this module.\n\n### Older releases\n\nThese releases were done before starting to maintain the above Changelog:\n\n* [v0.9.0](https://github.com/felixge/node-mysql/compare/v0.8.0...v0.9.0)\n* [v0.8.0](https://github.com/felixge/node-mysql/compare/v0.7.0...v0.8.0)\n* [v0.7.0](https://github.com/felixge/node-mysql/compare/v0.6.0...v0.7.0)\n* [v0.6.0](https://github.com/felixge/node-mysql/compare/v0.5.0...v0.6.0)\n* [v0.5.0](https://github.com/felixge/node-mysql/compare/v0.4.0...v0.5.0)\n* [v0.4.0](https://github.com/felixge/node-mysql/compare/v0.3.0...v0.4.0)\n* [v0.3.0](https://github.com/felixge/node-mysql/compare/v0.2.0...v0.3.0)\n* [v0.2.0](https://github.com/felixge/node-mysql/compare/v0.1.0...v0.2.0)\n* [v0.1.0](https://github.com/felixge/node-mysql/commits/v0.1.0)\n\n## License\n\nnode-mysql is licensed under the MIT license.\n",
  "_id": "mysql@0.9.6",
  "_from": "mysql@*"
}
